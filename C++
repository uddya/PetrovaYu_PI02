#include <iostream>
#include <vector>

void selectionSort(std::vector<int>& arr) {
    int n = arr.size();

    for (int i = 0; i < n - 1; ++i) {
        // Предполагаемый индекс минимального элемента
        int min_idx = i;
        for (int j = i + 1; j < n; ++j) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        // Обмен местами
        std::swap(arr[i], arr[min_idx]);
    }
}

int main() {
    std::vector<int> data = {64, 25, 12, 22, 11};

    std::cout << "Исходный массив: ";
    for (int num : data) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    selectionSort(data);

    std::cout << "Отсортированный массив: ";
    for (int num : data) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}

//Исходный массив: 64 25 12 22 11 
//Отсортированный массив: 11 12 22 25 64 

#include <iostream>
#include <vector>

// Функция слияния двух отсортированных массивов
void merge(std::vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1; // размер первой части
    int n2 = right - mid;    // размер второй части

    // Временные массивы
    std::vector<int> L(n1);
    std::vector<int> R(n2);

    // Копируем данные в временные массивы
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;

    // Сливаем обратно в arr
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Копируем оставшиеся элементы L, если есть
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Копируем оставшиеся элементы R, если есть
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Рекурсивная функция сортировки слиянием
void mergeSort(std::vector<int>& arr, int left, int right) {
    if (left >= right)
        return; // базовый случай: один элемент

    int mid = left + (right - left) / 2;

    // Сортируем две половины
    mergeSort(arr, left, mid);
    mergeSort(arr, mid + 1, right);

    // Сливаем отсортированные половины
    merge(arr, left, mid, right);
}

int main() {
    std::vector<int> array = {38, 27, 43, 3, 9, 82, 10};

    std::cout << "Исходный массив: ";
    for (int num : array) std::cout << num << " ";
    std::cout << std::endl;

    mergeSort(array, 0, array.size() - 1);

    std::cout << "Отсортированный массив: ";
    for (int num : array) std::cout << num << " ";
    std::cout << std::endl;

    return 0;
}

//Исходный массив: 38 27 43 3 9 82 10 
//Отсортированный массив: 3 9 10 27 38 43 82 

#include <iostream>
#include <vector>

// Функция для преобразования поддерева в кучу (от указанного индекса)
void heapify(std::vector<int>& arr, int n, int i) {
    int largest = i; // Инициализация наибольшего как корня
    int left = 2 * i + 1; // левый ребенок
    int right = 2 * i + 2; // правый ребенок

    // Если левый ребенок больше корня
    if (left < n && arr[left] > arr[largest]) {
        largest = left;
    }

    // Если правый ребенок больше текущего наибольшего
    if (right < n && arr[right] > arr[largest]) {
        largest = right;
    }

    // Если наибольший не является корнем
    if (largest != i) {
        std::swap(arr[i], arr[largest]);
        // Восстанавливаем кучу для поддерева
        heapify(arr, n, largest);
    }
}

// Функция для сортировки массива методом пирамидальной сортировки
void heapSort(std::vector<int>& arr) {
    int n = arr.size();

    // Построение кучи (перевод массива в кучу)
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    // Один за другим извлекаем элементы из кучи
    for (int i = n - 1; i >= 0; i--) {
        // Перемещаем текущий корень в конец массива
        std::swap(arr[0], arr[i]);

        // Восстанавливаем кучу для оставшегося массива
        heapify(arr, i, 0);
    }
}

int main() {
    std::vector<int> data = {4, 10, 3, 5, 1};
    
    // Вывод исходного массива
    std::cout << "Исходный массив: ";
    for (int num : data) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    // Сортировка
    heapSort(data);

    // Вывод отсортированного массива
    std::cout << "Отсортированный массив: ";
    for (int num : data) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}

//Исходный массив: 4 10 3 5 1 
//Отсортированный массив: 1 3 4 5 10 

#include <iostream>
#include <vector>
using namespace std;

int interpolationSearch(const vector<int>& arr, int target) {
    int low = 0;
    int high = arr.size() - 1;

    while (low <= high && target >= arr[low] && target <= arr[high]) {
        // Предполагаемая позиция искомого элемента
        int pos = low + ((double)(high - low) / (arr[high] - arr[low])) * (target - arr[low]);

        // Проверка границ
        if (pos < low || pos > high)
            break;

        if (arr[pos] == target)
            return pos;
        if (arr[pos] < target)
            low = pos + 1;
        else
            high = pos - 1;
    }
    return -1; // Не найден
}

int main() {
    vector<int> data = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
    int target = 70;

    int index = interpolationSearch(data, target);
    if (index != -1) {
        cout << "Элемент найден на позиции: " << index << endl;
    } else {
        cout << "Элемент не найден" << endl;
    }

    return 0;
}

//Элемент найден на позиции: 6
